"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRedux = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useRedux = function useRedux(selectors, actionCreators) {
  var _useContext = (0, _react.useContext)(_reactRedux.ReactReduxContext),
      store = _useContext.store;

  var getState = store.getState,
      dispatch = store.dispatch,
      subscribe = store.subscribe;
  var withSelectors = selectors && selectors.length;
  var reduxState = getState();
  var values;
  var actions;

  if (withSelectors) {
    values = selectors.map(function (selector) {
      return selector(reduxState);
    });
  }

  if (actionCreators && actionCreators.length) {
    actions = actionCreators.map(function (actionCreator) {
      return function (params) {
        return dispatch(actionCreator(params));
      };
    });
  }

  var _useState = (0, _react.useState)(values || reduxState),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var updateState = function updateState() {
    var newReduxState = getState();

    if (withSelectors) {
      var hasChanged = false;
      var newValues = [];

      for (var i = 0; i < selectors.length; i++) {
        newValues.push(selectors[i](newReduxState));
        hasChanged |= newValues[i] !== values[i];
      }

      if (hasChanged) {
        // Only rerender if selected values have changed
        setState(newValues);
      }
    } else {
      setState(newReduxState);
    }
  };

  (0, _react.useEffect)(function () {
    return subscribe(updateState);
  }, []);
  return [].concat(state, actions || dispatch);
};

exports.useRedux = useRedux;